// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/filesystem/filesystem.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// FileSystem is a mock of FileSystem interface
type FileSystem struct {
	ctrl     *gomock.Controller
	recorder *FileSystemMockRecorder
}

// FileSystemMockRecorder is the mock recorder for FileSystem
type FileSystemMockRecorder struct {
	mock *FileSystem
}

// NewFileSystem creates a new mock instance
func NewFileSystem(ctrl *gomock.Controller) *FileSystem {
	mock := &FileSystem{ctrl: ctrl}
	mock.recorder = &FileSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *FileSystem) EXPECT() *FileSystemMockRecorder {
	return m.recorder
}

// Remove mocks base method
func (m *FileSystem) Remove(file string) error {
	ret := m.ctrl.Call(m, "Remove", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *FileSystemMockRecorder) Remove(file interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*FileSystem)(nil).Remove), file)
}

// HomeDir mocks base method
func (m *FileSystem) HomeDir() (string, error) {
	ret := m.ctrl.Call(m, "HomeDir")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HomeDir indicates an expected call of HomeDir
func (mr *FileSystemMockRecorder) HomeDir() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HomeDir", reflect.TypeOf((*FileSystem)(nil).HomeDir))
}

// Open mocks base method
func (m *FileSystem) Open(file string) (io.Reader, error) {
	ret := m.ctrl.Call(m, "Open", file)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *FileSystemMockRecorder) Open(file interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*FileSystem)(nil).Open), file)
}

// Create mocks base method
func (m *FileSystem) Create(file string) (io.Writer, error) {
	ret := m.ctrl.Call(m, "Create", file)
	ret0, _ := ret[0].(io.Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *FileSystemMockRecorder) Create(file interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*FileSystem)(nil).Create), file)
}
